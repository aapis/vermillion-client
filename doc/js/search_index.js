var search_data = {"index":{"searchIndex":["changebranchtest","configurationtest","createtest","updatetest","vermillion","cfg","controller","base","change","create","firstrun","status","update","helper","apicommunication","endpoint","formatting","network","results","time","request","router","test","base","utils","add()","add()","all()","bootstrap!()","branch()","can_exec?()","config()","config()","default()","default()","delete()","exec()","exists?()","formatted()","get()","get()","get()","human_readable()","load()","new()","new()","new()","new()","new()","one()","one()","options()","populate_config()","post()","post_exec()","pre_exec()","pre_exec()","pre_exec()","pre_exec()","protocol=()","route()","sample()","send_to_all()","send_to_one()","servers()","setup()","should_eval_to()","symbolize()","test?()","test_change_branch_one()","test_config_exist()","test_default()","test_default()","test_update_config()","test_update_one()","to_query_string()","to_s()","gemfile","gemfile.lock","readme","rakefile","setup","vermillion-client.gemspec"],"longSearchIndex":["changebranchtest","configurationtest","createtest","updatetest","vermillion","vermillion::cfg","vermillion::controller","vermillion::controller::base","vermillion::controller::change","vermillion::controller::create","vermillion::controller::firstrun","vermillion::controller::status","vermillion::controller::update","vermillion::helper","vermillion::helper::apicommunication","vermillion::helper::endpoint","vermillion::helper::formatting","vermillion::helper::network","vermillion::helper::results","vermillion::helper::time","vermillion::request","vermillion::router","vermillion::test","vermillion::test::base","vermillion::utils","vermillion::helper::endpoint#add()","vermillion::helper::results#add()","vermillion::controller::update#all()","vermillion::cfg#bootstrap!()","vermillion::controller::change#branch()","vermillion::controller::base#can_exec?()","vermillion::controller::status#config()","vermillion::controller::update#config()","vermillion::controller::firstrun#default()","vermillion::controller::status#default()","vermillion::helper::endpoint#delete()","vermillion::controller::base#exec()","vermillion::helper::endpoint#exists?()","vermillion::helper::time::formatted()","vermillion::cfg#get()","vermillion::helper::endpoint#get()","vermillion::helper::network#get()","vermillion::helper::time::human_readable()","vermillion::helper::load()","vermillion::controller::base::new()","vermillion::helper::endpoint::new()","vermillion::helper::results::new()","vermillion::request::new()","vermillion::router::new()","vermillion::controller::create#one()","vermillion::controller::update#one()","vermillion::cfg#options()","vermillion::cfg#populate_config()","vermillion::helper::network#post()","vermillion::controller::base#post_exec()","vermillion::controller::base#pre_exec()","vermillion::controller::change#pre_exec()","vermillion::controller::create#pre_exec()","vermillion::router#pre_exec()","vermillion::helper::endpoint#protocol=()","vermillion::router#route()","vermillion::controller::base#sample()","vermillion::helper::apicommunication#send_to_all()","vermillion::helper::apicommunication#send_to_one()","vermillion::controller::status#servers()","vermillion::test::base#setup()","vermillion::helper::results#should_eval_to()","vermillion::helper::formatting#symbolize()","vermillion::test?()","changebranchtest#test_change_branch_one()","configurationtest#test_config_exist()","configurationtest#test_default()","createtest#test_default()","updatetest#test_update_config()","updatetest#test_update_one()","vermillion::utils::to_query_string()","vermillion::helper::endpoint#to_s()","","","","","",""],"info":[["ChangeBranchTest","","ChangeBranchTest.html","",""],["ConfigurationTest","","ConfigurationTest.html","",""],["CreateTest","","CreateTest.html","",""],["UpdateTest","","UpdateTest.html","",""],["Vermillion","","Vermillion.html","",""],["Vermillion::Cfg","","Vermillion/Cfg.html","",""],["Vermillion::Controller","","Vermillion/Controller.html","",""],["Vermillion::Controller::Base","","Vermillion/Controller/Base.html","",""],["Vermillion::Controller::Change","","Vermillion/Controller/Change.html","",""],["Vermillion::Controller::Create","","Vermillion/Controller/Create.html","",""],["Vermillion::Controller::Firstrun","","Vermillion/Controller/Firstrun.html","",""],["Vermillion::Controller::Status","","Vermillion/Controller/Status.html","",""],["Vermillion::Controller::Update","","Vermillion/Controller/Update.html","",""],["Vermillion::Helper","","Vermillion/Helper.html","",""],["Vermillion::Helper::ApiCommunication","","Vermillion/Helper/ApiCommunication.html","",""],["Vermillion::Helper::Endpoint","","Vermillion/Helper/Endpoint.html","",""],["Vermillion::Helper::Formatting","","Vermillion/Helper/Formatting.html","",""],["Vermillion::Helper::Network","","Vermillion/Helper/Network.html","",""],["Vermillion::Helper::Results","","Vermillion/Helper/Results.html","",""],["Vermillion::Helper::Time","","Vermillion/Helper/Time.html","",""],["Vermillion::Request","","Vermillion/Request.html","",""],["Vermillion::Router","","Vermillion/Router.html","",""],["Vermillion::Test","","Vermillion/Test.html","","<p>Define Test namespace\n"],["Vermillion::Test::Base","","Vermillion/Test/Base.html","",""],["Vermillion::Utils","","Vermillion/Utils.html","",""],["add","Vermillion::Helper::Endpoint","Vermillion/Helper/Endpoint.html#method-i-add","(key, value)","<p>Add a section to the path Params:\n<p>key &mdash; Symbol, the key to identify the section\n<p>value &mdash; Any value to store …\n"],["add","Vermillion::Helper::Results","Vermillion/Helper/Results.html#method-i-add","(result)","<p>Add a result for processing Params:\n<p>result &mdash; The value you want to store\n\n"],["all","Vermillion::Controller::Update","Vermillion/Controller/Update.html#method-i-all","()","<p>Update all sites in the manifest\n"],["bootstrap!","Vermillion::Cfg","Vermillion/Cfg.html#method-i-bootstrap-21","()","<p>Perform first run tasks and create or read config file values\n"],["branch","Vermillion::Controller::Change","Vermillion/Controller/Change.html#method-i-branch","(server, to = nil)","<p>Change branches on the selected server\n<p>server &mdash; Symbol representing the server you want to access\n<p>to &mdash; Optional …\n"],["can_exec?","Vermillion::Controller::Base","Vermillion/Controller/Base.html#method-i-can_exec-3F","(command)","<p>Determines if the command can execute Params:\n<p>command &mdash; Symbol containing the command we want to execute …\n\n"],["config","Vermillion::Controller::Status","Vermillion/Controller/Status.html#method-i-config","()","<p>Print configuration information\n"],["config","Vermillion::Controller::Update","Vermillion/Controller/Update.html#method-i-config","(server)","<p>Update the configuration manifest for one server Params:\n<p>server &mdash; Symbol representing the server you want …\n\n"],["default","Vermillion::Controller::Firstrun","Vermillion/Controller/Firstrun.html#method-i-default","()","<p>Create the configuration file if it does not exist\n"],["default","Vermillion::Controller::Status","Vermillion/Controller/Status.html#method-i-default","()","<p>Prints both configuration and server information, returns status code 0\n"],["delete","Vermillion::Helper::Endpoint","Vermillion/Helper/Endpoint.html#method-i-delete","(key)","<p>Deletes a value from the internal hash based on a key Params:\n<p>key &mdash; Symbol, the key to identify the section …\n\n"],["exec","Vermillion::Controller::Base","Vermillion/Controller/Base.html#method-i-exec","()","<p>Handle the request\n"],["exists?","Vermillion::Helper::Endpoint","Vermillion/Helper/Endpoint.html#method-i-exists-3F","(key)","<p>Checks whether a key exists Params:\n<p>key &mdash; Symbol, the key to identify the section\n\n"],["formatted","Vermillion::Helper::Time","Vermillion/Helper/Time.html#method-c-formatted","(time = nil)","<p>Use the following format for a given timestamp: “d/m/y @ H:M:S AM/PM”\nParams:\n<p>time &mdash; Optional …\n\n"],["get","Vermillion::Cfg","Vermillion/Cfg.html#method-i-get","(name)","<p>Get a specific value from the config file data Params:\n<p>name &mdash; String/symbol key value\n\n"],["get","Vermillion::Helper::Endpoint","Vermillion/Helper/Endpoint.html#method-i-get","(key)","<p>Return a value based on the provided key Params:\n<p>key &mdash; Symbol, the key to identify the section\n\n"],["get","Vermillion::Helper::Network","Vermillion/Helper/Network.html#method-i-get","(url, key)","<p>Perform a GET request to a specified URL Params:\n<p>url &mdash; The URL you want to hit\n<p>key &mdash; The authentication key …\n"],["human_readable","Vermillion::Helper::Time","Vermillion/Helper/Time.html#method-c-human_readable","(start, finish)","<p>Human readable strings to represent the length between two time objects\nParams:\n<p>start &mdash; Start time object …\n"],["load","Vermillion::Helper","Vermillion/Helper.html#method-c-load","(klass, args = nil)","<p>Loads a helper class Params:\n<p>klass &mdash; String representing the class helper subclass you want to load\n<p>args … &mdash; "],["new","Vermillion::Controller::Base","Vermillion/Controller/Base.html#method-c-new","(config, request)","<p>Setup internal variables that will be used in subclasses Params:\n<p>config &mdash; Instance of Vermillion::Cfg to …\n"],["new","Vermillion::Helper::Endpoint","Vermillion/Helper/Endpoint.html#method-c-new","(initial_path)","<p>Creates the Endpoint object with default values for internal variables\nParams:\n<p>initial_path &mdash; Starting point …\n\n"],["new","Vermillion::Helper::Results","Vermillion/Helper/Results.html#method-c-new","()","<p>Create the Results object\n"],["new","Vermillion::Request","Vermillion/Request.html#method-c-new","()","<p>Create the request object, parse ARGV for values\n"],["new","Vermillion::Router","Vermillion/Router.html#method-c-new","(config_instance)","<p>Create the router object Params:\n<p>config_instance &mdash; An instance of Vermillion::Cfg\n\n"],["one","Vermillion::Controller::Create","Vermillion/Controller/Create.html#method-i-one","(server, name = nil)","<p>Create a new project on the requested server\n<p>server &mdash; Symbol representing the server you want to access …\n"],["one","Vermillion::Controller::Update","Vermillion/Controller/Update.html#method-i-one","(server)","<p>Update just one server Params:\n<p>server &mdash; Symbol representing the server you want to update\n\n"],["options","Vermillion::Cfg","Vermillion/Cfg.html#method-i-options","()","<p>Returns a hash of all module constants and their values\n"],["populate_config","Vermillion::Cfg","Vermillion/Cfg.html#method-i-populate_config","()","<p>Populates the internal hash which stores any values set in the config file\n"],["post","Vermillion::Helper::Network","Vermillion/Helper/Network.html#method-i-post","(url, key)","<p>Perform a POST request to a specified URL Params:\n<p>url &mdash; The URL you want to hit\n<p>key &mdash; The authentication key …\n"],["post_exec","Vermillion::Controller::Base","Vermillion/Controller/Base.html#method-i-post_exec","()","<p>Perform post-run cleanup tasks, such as deleting old logs\n"],["pre_exec","Vermillion::Controller::Base","Vermillion/Controller/Base.html#method-i-pre_exec","()","<p>Perform pre-run tasks\n"],["pre_exec","Vermillion::Controller::Change","Vermillion/Controller/Change.html#method-i-pre_exec","()","<p>Prepare to execute the requested method\n"],["pre_exec","Vermillion::Controller::Create","Vermillion/Controller/Create.html#method-i-pre_exec","()","<p>Prepare to execute the requested method\n"],["pre_exec","Vermillion::Router","Vermillion/Router.html#method-i-pre_exec","()","<p>Prepare for routing\n"],["protocol=","Vermillion::Helper::Endpoint","Vermillion/Helper/Endpoint.html#method-i-protocol-3D","(use_https)","<p>Set endpoint protocol Params:\n<p>use_https &mdash; Boolean value for whether to use HTTPS\n\n"],["route","Vermillion::Router","Vermillion/Router.html#method-i-route","()","<p>Perform command routing\n"],["sample","Vermillion::Controller::Base","Vermillion/Controller/Base.html#method-i-sample","()","<p>Default method called by exec if no argument is passed\n"],["send_to_all","Vermillion::Helper::ApiCommunication","Vermillion/Helper/ApiCommunication.html#method-i-send_to_all","(endpoint, args = {})","<p>Send HTTP requests to all servers in the local manifest Params:\n<p>endpoint &mdash; The REST endpoint you&#39;d like …\n"],["send_to_one","Vermillion::Helper::ApiCommunication","Vermillion/Helper/ApiCommunication.html#method-i-send_to_one","(input, endpoint, args = {})","<p>Send an HTTP request to one server Params:\n<p>input &mdash; The server you want to connect to\n<p>endpoint &mdash; The REST endpoint …\n"],["servers","Vermillion::Controller::Status","Vermillion/Controller/Status.html#method-i-servers","()","<p>Print configured server information\n"],["setup","Vermillion::Test::Base","Vermillion/Test/Base.html#method-i-setup","()","<p>Perform setup tasks\n"],["should_eval_to","Vermillion::Helper::Results","Vermillion/Helper/Results.html#method-i-should_eval_to","(pass_value)","<p>Check if all values match a specified value Params:\n<p>pass_value &mdash; What all values in the array should evaluate …\n\n"],["symbolize","Vermillion::Helper::Formatting","Vermillion/Helper/Formatting.html#method-i-symbolize","(h)","<p>Recursively symbolize keys in a hash Params:\n<p>h &mdash; The hash you want to symbolize\n\n"],["test?","Vermillion","Vermillion.html#method-c-test-3F","()","<p>Flag to determine if module is running in test mode\n"],["test_change_branch_one","ChangeBranchTest","ChangeBranchTest.html#method-i-test_change_branch_one","()","<p>Test changing a branch on one server\n"],["test_config_exist","ConfigurationTest","ConfigurationTest.html#method-i-test_config_exist","()","<p>Test if the config file exists\n"],["test_default","ConfigurationTest","ConfigurationTest.html#method-i-test_default","()","<p>Test the default method\n"],["test_default","CreateTest","CreateTest.html#method-i-test_default","()","<p>Test the default method\n"],["test_update_config","UpdateTest","UpdateTest.html#method-i-test_update_config","()","<p>Test updating the config manifest on one server\n"],["test_update_one","UpdateTest","UpdateTest.html#method-i-test_update_one","()","<p>Test updating one server\n"],["to_query_string","Vermillion::Utils","Vermillion/Utils.html#method-c-to_query_string","(args)","<p>Convert a hash to a query string Params:\n<p>args &mdash; Hash to convert\n\n"],["to_s","Vermillion::Helper::Endpoint","Vermillion/Helper/Endpoint.html#method-i-to_s","()","<p>Override the to_s method to return an endpoint fragment\n"],["Gemfile","","Gemfile.html","","<p>source &#39;rubygems.org&#39;\n<p>gemspec\n"],["Gemfile.lock","","Gemfile_lock.html","","<p>PATH\n\n<pre>remote: .\nspecs:\n  vermillion-client (0.3.0)\n    mime-types\n    notifaction</pre>\n<p>GEM\n"],["README","","README_md.html","","<p>vermillion-client\n<p>Interact with your vermillion-server instances.\n<p>Installation\n"],["Rakefile","","Rakefile.html","","<p>require “bundler/gem_tasks” require “rake/testtask” require “client”\n<p>Rake::TestTask.new …\n"],["setup","","bin/setup.html","","<p>#!/bin/bash set -euo pipefail IFS=$&#39;nt&#39;\n<p>bundle install\n<p># Do any other automated setup that you …\n"],["vermillion-client.gemspec","","vermillion-client_gemspec.html","","<p>lib = File.expand_path(&#39;../lib&#39;, __FILE__) $LOAD_PATH.unshift(lib)\nunless $LOAD_PATH.include?(lib) …\n"]]}}